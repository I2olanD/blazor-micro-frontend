@using Client.Repositories.Menu

@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Logging

@inject ILogger<App> Logger
@inject IMenuRepository MenuRepository

<Router AppAssembly="typeof(App).Assembly" AdditionalAssemblies="lazyLoadedAssemblies"
    OnNavigateAsync="OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>

    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();
    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            // Check for Root path
            if (args.Path == "")
            {
                return;
            }

            // Handle unrecognized paths here
            var menuItem = MenuRepository.GetBy(args.Path);
            if (menuItem == null || menuItem.Type == "internal")
            {
                return;
            }

            // Check if assembly is already loaded
            var assemblyName = $"{menuItem.Name}App";
            var loadedAssembly = lazyLoadedAssemblies.Find(a => a.GetName().Name == assemblyName);
            if (loadedAssembly != null)
            {
                return;
            }

            // Load assembly
            var appUrl = $"http://host.docker.internal:3000/{assemblyName}.dll";
            var client = new HttpClient();
            var bytes = await client.GetByteArrayAsync(appUrl);
            var assembly = Assembly.Load(bytes);

            if (assembly != null)
            {
                var aName = assembly.GetName();
                Logger.LogInformation("Name: {0}", aName.Name);
                Logger.LogInformation("Version: {0}.{1}", aName?.Version?.Major, aName?.Version?.Minor);
                lazyLoadedAssemblies.AddRange([assembly]);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error: {Message}", ex.Message);
        }
    }
}